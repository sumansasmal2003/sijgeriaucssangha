'import React, { useState, useEffect, useCallback } from 'react';
import { useParams, Link } from 'react-router-dom';
import api from '../../api/api';
import { toast } from 'react-hot-toast';
import { motion } from 'framer-motion';
import { Loader2, Users, ArrowLeft, Mail, Phone, UserCheck, Calendar, MapPin, User, Sparkles } from 'lucide-react';
import { format } from 'date-fns';

const fadeIn = {
    initial: { opacity: 0, y: 30 },
    animate: { opacity: 1, y: 0, transition: { duration: 0.7, ease: [0.33, 1, 0.68, 1] } }
};

const staggerContainer = {
    animate: { transition: { staggerChildren: 0.1 } }
};

const EventParticipantsPage = () => {
    const { eventId } = useParams();
    const [event, setEvent] = useState(null);
    const [participants, setParticipants] = useState([]);
    const [loading, setLoading] = useState(true);

    const fetchParticipants = useCallback(async () => {
        try {
            setLoading(true);
            // --- FIX: Corrected API URL to plural 'events' ---
            const eventRes = await api.get(`/event/${eventId}`);
            setEvent(eventRes.data.event);

            // --- FIX: Corrected API URL to plural 'events' ---
            const participantsRes = await api.get(`/event/participants/${eventId}`);
            setParticipants(participantsRes.data.participants);
        } catch (error) {
            toast.error("Failed to fetch event participants.");
        } finally {
            setLoading(false);
        }
    }, [eventId]);

    useEffect(() => {
        fetchParticipants();
    }, [fetchParticipants]);

    const totalPerformers = participants.reduce((sum, p) => sum + (p.performers ? p.performers.length : 0), 0);
    const eventDate = event ? new Date(event.date) : null;

    if (loading) {
        return (
            <div className="min-h-screen bg-background flex items-center justify-center">
                <div className="text-center">
                    <Loader2 className="w-16 h-16 animate-spin text-primary mx-auto mb-4" />
                    <p className="text-text-secondary">Loading participants...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-background">
            {/* Hero Section */}
            <section className="relative py-20 bg-gradient-to-br from-surface/50 to-background">
                <div className="absolute inset-0 opacity-[0.02]">
                    <div className="absolute inset-0" style={{
                        backgroundImage: `radial-gradient(circle at 1px 1px, #F8F8F8 1px, transparent 0)`,
                        backgroundSize: '40px 40px'
                    }}></div>
                </div>

                <div className="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
                    <motion.div
                        initial={{ opacity: 0, y: 30 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.8 }}
                        className="max-w-6xl mx-auto"
                    >
                        <Link to="/member/events" className="inline-flex items-center gap-2 text-text-secondary hover:text-primary transition-all duration-300 group mb-8">
                            <ArrowLeft size={20} className="group-hover:-translate-x-1 transition-transform" />
                            <span>Back to All Events</span>
                        </Link>

                        <div className="bg-surface/50 backdrop-blur-sm rounded-2xl p-8 border border-border/50">
                            <div className="flex flex-col lg:flex-row items-start lg:items-center justify-between gap-6">
                                <div className="flex-1">
                                    <h1 className="text-3xl sm:text-4xl font-bold text-text-primary mb-2">Event Participants</h1>
                                    <h2 className="text-2xl sm:text-3xl font-bold text-primary mb-4">{event?.title}</h2>
                                    <div className="flex flex-wrap gap-6 text-text-secondary">
                                        {eventDate && (<div className="flex items-center gap-2"><Calendar size={18} className="text-primary" /><span>{format(eventDate, 'MMMM dd, yyyy')}</span></div>)}
                                        {event?.location && (<div className="flex items-center gap-2"><MapPin size={18} className="text-primary" /><span>{event.location}</span></div>)}
                                    </div>
                                </div>
                                <div className="bg-background/50 rounded-xl p-6 border border-border/50">
                                    <div className="grid grid-cols-2 gap-6 text-center">
                                        <div>
                                            <div className="text-2xl font-bold text-primary">{participants.length}</div>
                                            <div className="text-sm text-text-secondary">Registrations</div>
                                        </div>
                                        <div>
                                            <div className="text-2xl font-bold text-secondary">{totalPerformers}</div>
                                            <div className="text-sm text-text-secondary">Total Performers</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </motion.div>
                </div>
            </section>

            {/* Participants Section */}
            <section className="py-16">
                <div className="container mx-auto px-4 sm:px-6 lg:px-8">
                    {participants.length > 0 ? (
                        <motion.div variants={staggerContainer} initial="initial" animate="animate" className="grid gap-6 max-w-4xl mx-auto">
                            {participants.map((registration) => {
                                // --- FIX: Add a check to ensure registeredBy exists ---
                                if (!registration.registeredBy) {
                                    return null; // Skip rendering if the user was deleted or data is missing
                                }
                                return (
                                <motion.div key={registration._id} variants={fadeIn} className="bg-surface/50 backdrop-blur-sm border border-border/50 rounded-2xl overflow-hidden hover:border-primary/30 transition-all duration-500 group">
                                    <div className="p-6 bg-gradient-to-r from-background/50 to-surface/30 border-b border-border/50">
                                        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
                                            <div className="flex items-center gap-4">
                                                <div className="relative">
                                                    <img
                                                        // --- FIX: Use optional chaining for safety ---
                                                        src={registration.registeredBy.profileImage?.url || '/default-avatar.png'}
                                                        alt={registration.registeredBy.fullName}
                                                        className="w-14 h-14 rounded-xl object-cover border-2 border-primary/50"
                                                    />
                                                </div>
                                                <div>
                                                    <p className="font-bold text-text-primary text-lg">{registration.registeredBy.fullName}</p>
                                                    <div className="flex flex-wrap gap-x-4 gap-y-1 text-sm text-text-secondary mt-1">
                                                        <a href={`mailto:${registration.email}`} className="flex items-center gap-1.5 hover:text-primary"><Mail size={14}/><span>{registration.email}</span></a>
                                                        <div className="flex items-center gap-1.5"><Phone size={14}/><span>{registration.phone}</span></div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div className="bg-primary/10 text-primary px-3 py-1 rounded-full text-sm font-medium">
                                                {registration.performers.length} {registration.performers.length === 1 ? 'Performer' : 'Performers'}
                                            </div>
                                        </div>
                                    </div>
                                    <div className="p-6">
                                        <h4 className="font-semibold text-text-primary text-lg mb-4 flex items-center gap-2"><Users size={18} className="text-secondary" />Performers Details</h4>
                                        <div className="grid gap-3">
                                            {registration.performers.map((performer, index) => (
                                                <div key={index} className="flex items-center gap-3 p-3 bg-background/30 rounded-lg border border-border/30">
                                                    <div className="p-2 rounded-lg bg-secondary/10 text-secondary"><User size={16} /></div>
                                                    <div><p className="font-medium text-text-primary">{performer.firstName} {performer.lastName}</p></div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                </motion.div>
                            )})}
                        </motion.div>
                    ) : (
                        <motion.div initial={{ opacity: 0, scale: 0.9 }} animate={{ opacity: 1, scale: 1 }} className="text-center py-20 max-w-md mx-auto">
                            <div className="w-24 h-24 bg-border/20 rounded-full flex items-center justify-center mx-auto mb-6"><Users size={40} className="text-border" /></div>
                            <h3 className="text-2xl font-bold text-text-primary mb-2">No Participants Yet</h3>
                            <p className="text-text-secondary mb-6">No one has registered for this event yet. Check back later.</p>
                            <Link to="/member/events" className="inline-flex items-center gap-2 text-primary hover:underline"><ArrowLeft size={16} /><span>Back to Events</span></Link>
                        </motion.div>
                    )}
                </div>
            </section>
        </div>
    );
};

export default EventParticipantsPage;
', 'import React, { useState } from 'react';
import api from '../../api/api';
import { toast } from 'react-hot-toast';
import { motion } from 'framer-motion';
import { UserPlus, Send, Loader2, ShieldCheck, Users, Award, Mail, Phone, User, Sparkles, ArrowLeft } from 'lucide-react';
import { Link } from 'react-router-dom';
import CustomDropdown from '../../components/CustomDropdown';

const fadeIn = {
  initial: { opacity: 0, y: 30 },
  animate: { opacity: 1, y: 0, transition: { duration: 0.7, ease: [0.33, 1, 0.68, 1] } }
};

const InviteMemberPage = () => {
    const [formData, setFormData] = useState({
        firstName: '',
        lastName: '',
        email: '',
        phone: '',
        designation: 'Member',
    });
    const [loading, setLoading] = useState(false);

    const designationOptions = [
        { name: 'Member', value: 'Member' },
        { name: 'Secretary', value: 'Secretary' },
        { name: 'President', value: 'President' },
    ];

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleDesignationChange = (value) => {
        setFormData(prev => ({ ...prev, designation: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        try {
            const { data } = await api.post('/member/invite', formData);
            toast.success(data.message || 'Invitation sent successfully!');
            setFormData({
                firstName: '',
                lastName: '',
                email: '',
                phone: '',
                designation: 'Member',
            });
        } catch (error) {
            toast.error(error.response?.data?.message || 'Failed to send invitation.');
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="min-h-screen bg-background flex flex-col lg:flex-row">
            {/* Left Side - Info Section (Hidden on Mobile) */}
            <div className="hidden lg:flex lg:w-1/2 bg-gradient-to-br from-surface/80 to-background/80 relative overflow-hidden">
                <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-secondary/10"></div>
                <div className="absolute top-10 right-10 w-64 h-64 bg-primary/5 rounded-full blur-3xl"></div>
                <div className="absolute bottom-10 left-10 w-80 h-80 bg-secondary/5 rounded-full blur-3xl"></div>

                <div className="relative z-10 h-full flex flex-col justify-center p-8 lg:p-12 xl:p-16">
                    <motion.div
                        initial={{ opacity: 0, x: -30 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.8 }}
                        className="max-w-lg"
                    >
                        <div className="flex items-center gap-3 mb-8">
                            <div className="p-3 rounded-2xl bg-gradient-to-r from-primary to-secondary shadow-lg">
                                <UserPlus className="w-8 h-8 text-white" />
                            </div>
                            <div>
                                <h1 className="text-2xl font-bold text-text-primary">Grow Our Community</h1>
                                <p className="text-text-secondary text-sm">Invite a new member to join</p>
                            </div>
                        </div>

                        <h2 className="text-4xl lg:text-5xl font-bold text-text-primary mb-6 leading-tight">
                            Extend an <span className="text-primary">Invitation</span> to Join the Family
                        </h2>

                        <p className="text-lg text-text-secondary mb-8 leading-relaxed">
                            Help strengthen our community by inviting passionate individuals. They'll receive a secure invitation to complete their profile and join our mission.
                        </p>

                        <div className="space-y-4 mb-8">
                            {[
                                { icon: ShieldCheck, text: "Secure onboarding process with email verification" },
                                { icon: Users, text: "Expand our network of dedicated community members" },
                                { icon: Award, text: "Recognize contributions with appropriate designations" },
                                { icon: Sparkles, text: "Build a diverse and vibrant community together" }
                            ].map((item, index) => (
                                <motion.div
                                    key={index}
                                    initial={{ opacity: 0, x: -20 }}
                                    animate={{ opacity: 1, x: 0 }}
                                    transition={{ duration: 0.5, delay: index * 0.1 }}
                                    className="flex items-center gap-4 text-text-secondary group"
                                >
                                    <div className="p-2 rounded-lg bg-primary/10 text-primary group-hover:bg-primary group-hover:text-white transition-all duration-300">
                                        <item.icon size={18} />
                                    </div>
                                    <span className="text-sm group-hover:text-text-primary transition-colors">{item.text}</span>
                                </motion.div>
                            ))}
                        </div>

                        <div className="p-4 rounded-xl bg-surface/50 border border-border/50">
                            <div className="flex items-center gap-3 text-sm text-text-secondary">
                                <ShieldCheck size={16} className="text-primary flex-shrink-0" />
                                <span>All invitations are secure and require email verification.</span>
                            </div>
                        </div>
                    </motion.div>
                </div>
            </div>

            {/* Right Side - Form Section */}
            <div className="w-full lg:w-1/2 flex items-center justify-center p-8 lg:p-12 xl:p-16">
                <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: 0.2 }}
                    className="w-full max-w-md"
                >
                    {/* Back Button for Mobile */}
                    <Link
                        to="/member/dashboard"
                        className="lg:hidden flex items-center gap-2 text-text-secondary hover:text-primary transition-all duration-300 group mb-6"
                    >
                        <ArrowLeft size={20} className="group-hover:-translate-x-1 transition-transform" />
                        <span>Back to Dashboard</span>
                    </Link>

                    <div className="text-center mb-8">
                        <h2 className="text-3xl font-bold text-text-primary mb-2">Invite New Member</h2>
                        <p className="text-text-secondary">They'll receive an email to complete their profile</p>
                    </div>

                    <form onSubmit={handleSubmit} className="space-y-6">
                        {/* Name Fields */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-text-secondary mb-2">
                                    First Name
                                </label>
                                <div className="relative">
                                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary w-5 h-5" />
                                    <input
                                        type="text"
                                        name="firstName"
                                        value={formData.firstName}
                                        onChange={handleChange}
                                        required
                                        placeholder="Enter first name"
                                        className="w-full pl-10 pr-4 py-3 bg-surface/50 border border-border/50 rounded-xl text-text-primary placeholder-text-secondary/70 focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary/50 transition-all duration-300"
                                    />
                                </div>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-text-secondary mb-2">
                                    Last Name
                                </label>
                                <div className="relative">
                                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary w-5 h-5" />
                                    <input
                                        type="text"
                                        name="lastName"
                                        value={formData.lastName}
                                        onChange={handleChange}
                                        required
                                        placeholder="Enter last name"
                                        className="w-full pl-10 pr-4 py-3 bg-surface/50 border border-border/50 rounded-xl text-text-primary placeholder-text-secondary/70 focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary/50 transition-all duration-300"
                                    />
                                </div>
                            </div>
                        </div>

                        {/* Email Field */}
                        <div>
                            <label className="block text-sm font-medium text-text-secondary mb-2">
                                Email Address
                            </label>
                            <div className="relative">
                                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary w-5 h-5" />
                                <input
                                    type="email"
                                    name="email"
                                    value={formData.email}
                                    onChange={handleChange}
                                    required
                                    placeholder="Enter email address"
                                    className="w-full pl-10 pr-4 py-3 bg-surface/50 border border-border/50 rounded-xl text-text-primary placeholder-text-secondary/70 focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary/50 transition-all duration-300"
                                />
                            </div>
                        </div>

                        {/* Phone Field */}
                        <div>
                            <label className="block text-sm font-medium text-text-secondary mb-2">
                                Contact Number
                            </label>
                            <div className="relative">
                                <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary w-5 h-5" />
                                <input
                                    type="tel"
                                    name="phone"
                                    value={formData.phone}
                                    onChange={handleChange}
                                    required
                                    placeholder="Enter phone number"
                                    className="w-full pl-10 pr-4 py-3 bg-surface/50 border border-border/50 rounded-xl text-text-primary placeholder-text-secondary/70 focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary/50 transition-all duration-300"
                                />
                            </div>
                        </div>

                        {/* Designation Dropdown */}
                        <CustomDropdown
                            label="Designation"
                            options={designationOptions}
                            selected={formData.designation}
                            setSelected={handleDesignationChange}
                            icon={Award}
                        />

                        {/* Submit Button */}
                        <motion.button
                            whileHover={{ scale: loading ? 1 : 1.02 }}
                            whileTap={{ scale: 0.98 }}
                            type="submit"
                            disabled={loading}
                            className="w-full flex justify-center items-center gap-3 py-4 px-6 rounded-xl bg-gradient-to-r from-primary to-primary-hover text-white font-semibold hover:shadow-lg hover:shadow-primary/25 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {loading ? (
                                <>
                                    <Loader2 size={20} className="animate-spin" />
                                    <span>Sending Invitation...</span>
                                </>
                            ) : (
                                <>
                                    <Send size={20} />
                                    <span>Send Invitation</span>
                                </>
                            )}
                        </motion.button>
                    </form>

                    {/* Security Note */}
                    <div className="mt-6 p-4 rounded-xl bg-surface/30 border border-border/30">
                        <div className="flex items-start gap-3">
                            <ShieldCheck size={16} className="text-primary mt-0.5 flex-shrink-0" />
                            <div>
                                <p className="text-sm text-text-secondary">
                                    The invited member will receive a secure link to complete their profile.
                                    Their information is protected and encrypted.
                                </p>
                            </div>
                        </div>
                    </div>
                </motion.div>
            </div>
        </div>
    );
};

export default InviteMemberPage;
', 'import React, { useState, useEffect, useCallback } from 'react';
import api from '../../api/api';
import { toast } from 'react-hot-toast';
import { PlusCircle, Loader2, Edit, Trash2 } from 'lucide-react';
import { format } from 'date-fns';
import Modal from '../../components/Modal';

const ManageAnnouncementsPage = () => {
    const [announcements, setAnnouncements] = useState([]);
    const [loading, setLoading] = useState(true);
    const [showModal, setShowModal] = useState(false);
    const [isEditing, setIsEditing] = useState(false);
    const [currentAnnouncement, setCurrentAnnouncement] = useState(null);

    const fetchAnnouncements = useCallback(async () => {
        try {
            setLoading(true);
            const { data } = await api.get('/announcements/all');
            setAnnouncements(data.announcements);
        } catch (error) {
            toast.error("Failed to load announcements.");
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchAnnouncements();
    }, [fetchAnnouncements]);

    const handleOpenCreateModal = () => {
        setIsEditing(false);
        setCurrentAnnouncement({ title: '', content: '' });
        setShowModal(true);
    };

    const handleOpenEditModal = (announcement) => {
        setIsEditing(true);
        setCurrentAnnouncement(announcement);
        setShowModal(true);
    };

    const handleCloseModal = () => {
        setShowModal(false);
        setCurrentAnnouncement(null);
    };

    const handleSubmit = async (announcementData) => {
        try {
            if (isEditing) {
                await api.put(`/announcements/${currentAnnouncement._id}`, announcementData);
                toast.success('Announcement updated successfully!');
            } else {
                await api.post('/announcements/new', announcementData);
                toast.success('Announcement created successfully!');
            }
            fetchAnnouncements();
            handleCloseModal();
        } catch (error) {
            toast.error(error.response?.data?.message || 'Failed to save announcement.');
        }
    };

    const handleDelete = async (id) => {
        if (window.confirm("Are you sure you want to delete this announcement?")) {
            try {
                await api.delete(`/announcements/${id}`);
                toast.success("Announcement deleted!");
                fetchAnnouncements();
            } catch (error) {
                toast.error("Failed to delete announcement.");
            }
        }
    };

    return (
        <>
            <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
                <div className="flex justify-between items-center mb-8">
                    <h1 className="text-3xl font-bold text-text-primary">Manage Announcements</h1>
                    <button onClick={handleOpenCreateModal} className="flex items-center gap-2 bg-primary text-white font-semibold px-4 py-2 rounded-lg hover:bg-primary-hover transition-colors">
                        <PlusCircle size={20} />
                        <span>New Announcement</span>
                    </button>
                </div>

                {loading ? (
                    <div className="flex justify-center items-center h-64"><Loader2 className="w-12 h-12 animate-spin text-primary" /></div>
                ) : (
                    <div className="bg-surface border border-border rounded-lg shadow-md overflow-hidden">
                        <table className="min-w-full divide-y divide-border">
                            <thead className="bg-background">
                                <tr>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-text-secondary uppercase tracking-wider">Title</th>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-text-secondary uppercase tracking-wider">Created By</th>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-text-secondary uppercase tracking-wider">Date</th>
                                    <th className="px-6 py-3 text-right text-xs font-medium text-text-secondary uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-border">
                                {announcements.map((item) => (
                                    <tr key={item._id}>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-text-primary">{item.title}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-text-secondary">{item.createdBy.firstName} {item.createdBy.lastName}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-text-secondary">{format(new Date(item.createdAt), 'PP')}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-4">
                                            <button onClick={() => handleOpenEditModal(item)} className="text-primary hover:text-primary-hover"><Edit size={18} /></button>
                                            <button onClick={() => handleDelete(item._id)} className="text-secondary hover:text-secondary/80"><Trash2 size={18} /></button>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                )}
            </div>

            <Modal isOpen={showModal} onClose={handleCloseModal} title={isEditing ? 'Edit Announcement' : 'Create Announcement'}>
                <AnnouncementForm announcement={currentAnnouncement} onSubmit={handleSubmit} onCancel={handleCloseModal} />
            </Modal>
        </>
    );
};

// Sub-component for the form to keep things clean
const AnnouncementForm = ({ announcement, onSubmit, onCancel }) => {
    const [formData, setFormData] = useState(announcement);
    const [formLoading, setFormLoading] = useState(false);

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setFormLoading(true);
        await onSubmit(formData);
        setFormLoading(false);
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <div>
                <label className="block text-sm font-medium text-text-secondary mb-1">Title</label>
                <input type="text" name="title" value={formData.title} onChange={handleChange} required className="w-full bg-background border border-border rounded-lg p-2" />
            </div>
            <div>
                <label className="block text-sm font-medium text-text-secondary mb-1">Content</label>
                <textarea name="content" value={formData.content} onChange={handleChange} required rows="6" className="w-full bg-background border border-border rounded-lg p-2" />
            </div>
            <div className="flex justify-end gap-4 pt-4">
                <button type="button" onClick={onCancel} className="bg-background border border-border text-text-primary font-semibold px-4 py-2 rounded-lg">Cancel</button>
                <button type="submit" disabled={formLoading} className="bg-primary text-white font-semibold px-4 py-2 rounded-lg hover:bg-primary-hover disabled:opacity-50 flex items-center gap-2">
                    {formLoading && <Loader2 className="animate-spin" size={18} />}
                    {formLoading ? 'Saving...' : 'Save Announcement'}
                </button>
            </div>
        </form>
    );
};

export default ManageAnnouncementsPage;
' make those in the same theme
