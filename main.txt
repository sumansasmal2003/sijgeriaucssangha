'import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import {
    CalendarPlus,
    ImagePlus,
    UserCog,
    Users,
    ArrowRight,
    UserPlus,
    BookOpen,
    Megaphone,
    LogOut,
    Sparkles
} from 'lucide-react';
import { motion } from 'framer-motion';

// --- Animation Variants ---
const cardVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: (i) => ({
    opacity: 1,
    y: 0,
    transition: {
      delay: i * 0.05,
      duration: 0.5,
      ease: "easeOut"
    }
  })
};

// --- Reusable Dashboard Card Component ---
const DashboardCard = ({ to, icon, title, description, color = 'primary', index }) => {
    const Icon = icon;

    const colorThemes = {
        primary: {
            bg: 'from-blue-500/10 to-cyan-500/10',
            text: 'text-blue-400',
            shadow: 'hover:shadow-blue-500/20',
        },
        secondary: {
            bg: 'from-pink-500/10 to-rose-500/10',
            text: 'text-pink-400',
            shadow: 'hover:shadow-pink-500/20',
        },
        user: {
            bg: 'from-emerald-500/10 to-teal-500/10',
            text: 'text-emerald-400',
            shadow: 'hover:shadow-emerald-500/20',
        }
    };

    const theme = colorThemes[color] || colorThemes.primary;

    return (
        <motion.div
            variants={cardVariants}
            initial="hidden"
            animate="visible"
            custom={index}
            whileHover={{ y: -5, scale: 1.02 }}
            className={`group bg-gradient-to-br from-surface to-background border-2 border-border/50 rounded-3xl p-8 flex flex-col transition-all duration-300 hover:border-border/80 hover:shadow-2xl ${theme.shadow}`}
        >
            <Link to={to} className="flex flex-col h-full">
                <div className={`w-16 h-16 flex items-center justify-center rounded-2xl bg-gradient-to-br ${theme.bg} transition-all duration-300 group-hover:scale-110 group-hover:rotate-6`}>
                    <Icon className={`w-8 h-8 ${theme.text}`} />
                </div>
                <div className="mt-6 flex-grow">
                    <h3 className="text-2xl font-black text-text-primary">{title}</h3>
                    <p className="mt-2 text-text-secondary text-base leading-relaxed font-light">{description}</p>
                </div>
                <div className={`mt-6 flex items-center text-lg font-bold ${theme.text}`}>
                    <span>Explore Section</span>
                    <ArrowRight className="w-5 h-5 ml-3 transition-transform group-hover:translate-x-2" />
                </div>
            </Link>
        </motion.div>
    );
};

// --- Main Member Dashboard Component ---
const MemberDashboard = () => {
    const { member, logout } = useAuth();
    const navigate = useNavigate();

    const handleLogout = async () => {
        await logout();
        navigate('/');
    };

    const canInvite = ['Admin', 'President', 'Secretary'].includes(member?.designation);
    const canManageAnnouncements = ['Admin', 'President', 'Secretary'].includes(member?.designation);

    const dashboardItems = [
        { to: "/member/events", icon: CalendarPlus, title: "Manage Events", description: "Create, update, and view participants for all club events.", color: "primary" },
        { to: "/member/gallery", icon: ImagePlus, title: "Manage Gallery", description: "Upload new photos from recent events to the public gallery.", color: "secondary" },
        { to: "/member/profile", icon: UserCog, title: "Profile Settings", description: "Update your personal information and change your password.", color: "user" },
        { to: "/member/users", icon: Users, title: "Manage Users", description: "View all registered users and manage their account status.", color: "secondary" },
        { to: "/member/directory", icon: BookOpen, title: "Member Directory", description: "View the list of all active club members and their roles.", color: "primary" },
    ];

    if (canManageAnnouncements) {
        dashboardItems.push({ to: "/member/announcements", icon: Megaphone, title: "Manage Announcements", description: "Post, edit, and delete official club announcements.", color: "user" });
    }
    if (canInvite) {
        dashboardItems.push({ to: "/member/invite", icon: UserPlus, title: "Invite Member", description: "Send an invitation to a new member to join the club.", color: "primary" });
    }

    return (
        <div className="min-h-screen bg-background">
            {/* Enhanced Header Section */}
            <section className="relative py-24 bg-gradient-to-br from-surface/50 to-background">
                <div className="absolute inset-0 opacity-[0.02]">
                    <div className="absolute inset-0" style={{ backgroundImage: `radial-gradient(circle at 1px 1px, currentColor 1px, transparent 0)`, backgroundSize: '40px 40px' }}></div>
                </div>

                <div className="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
                    <motion.div
                        initial={{ opacity: 0, y: 30 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.8 }}
                        className="max-w-7xl mx-auto flex flex-col lg:flex-row justify-between items-start lg:items-center gap-8"
                    >
                        <div className="flex items-center gap-6">
                            <motion.img
                                src={member?.profileImage?.url}
                                alt={member?.firstName}
                                className="w-24 h-24 rounded-2xl object-cover border-4 border-primary/50 shadow-lg"
                                whileHover={{ scale: 1.1 }}
                            />
                            <div>
                                <h1 className="text-4xl sm:text-5xl font-bold tracking-tight text-text-primary mb-2">
                                    Welcome back, <span className="text-primary">{member?.firstName}!</span>
                                </h1>
                                <p className="text-lg text-text-secondary max-w-2xl">
                                    Here's your command center for all member activities.
                                </p>
                            </div>
                        </div>
                        <motion.button
                            onClick={handleLogout}
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            className="flex items-center gap-3 bg-secondary/10 text-secondary font-semibold px-6 py-3 rounded-xl hover:bg-secondary/20 transition-all duration-300"
                        >
                            <LogOut size={20}/>
                            <span>Logout</span>
                        </motion.button>
                    </motion.div>
                </div>
            </section>

            {/* Dashboard Grid Section */}
            <section className="py-16">
                <div className="container mx-auto px-4 sm:px-6 lg:px-8">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                        {dashboardItems.map((item, index) => (
                            <DashboardCard
                                key={index}
                                to={item.to}
                                icon={item.icon}
                                title={item.title}
                                description={item.description}
                                color={item.color}
                                index={index}
                            />
                        ))}
                    </div>
                </div>
            </section>
        </div>
    );
};

export default MemberDashboard;
', 'import React, { useState, useEffect, useCallback } from 'react';
import api from '../../api/api';
import { toast } from 'react-hot-toast';
import { Loader2, Users } from 'lucide-react';

const MemberCard = ({ member }) => {
    return (
        <div className="bg-surface border border-border rounded-lg text-center p-6 flex flex-col items-center">
          {member.profileImage ? (
              <img
                  src={member.profileImage.url}
                  alt={`${member.firstName} ${member.lastName}`}
                  className="w-24 h-24 rounded-full object-cover border-4 border-primary/50 mb-4"
              />
          ) : (
              <div className="w-24 h-24 rounded-full bg-gray-200 flex items-center justify-center border-4 border-primary/50 mb-4">
                  <Users className="w-12 h-12 text-gray-400" />
              </div>
          )}
            <h3 className="text-lg font-bold text-text-primary">{member.firstName} {member.lastName}</h3>
            <p className="text-sm text-text-primary font-semibold">{member.designation}</p>
            <p className="text-sm text-text-secondary font-semibold">{member.phone}</p>
            <p className="text-sm text-text-secondary font-semibold">{member.email}</p>
        </div>
    );
};

const MemberDirectoryPage = () => {
    const [members, setMembers] = useState([]);
    const [loading, setLoading] = useState(true);

    const fetchMembers = useCallback(async () => {
        try {
            setLoading(true);
            const { data } = await api.get('/member/directory');
            setMembers(data.members);
        } catch (error) {
            toast.error('Could not fetch member directory.');
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchMembers();
    }, [fetchMembers]);

    if (loading) {
        return (
            <div className="flex justify-center items-center h-64">
                <Loader2 className="w-12 h-12 animate-spin text-primary" />
            </div>
        );
    }

    return (
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
            <div className="text-center mb-12">
                <Users className="mx-auto h-12 w-12 text-primary" />
                <h1 className="mt-4 text-4xl font-bold tracking-tight text-text-primary">
                    Member Directory
                </h1>
                <p className="mt-2 text-lg text-text-secondary">
                    Meet the dedicated members of our community.
                </p>
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                {members.map(member => (
                    <MemberCard key={member._id} member={member} />
                ))}
            </div>
        </div>
    );
};

export default MemberDirectoryPage;
', 'import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import api from '../../api/api';
import { toast } from 'react-hot-toast';
import { User, Lock, Save, Loader2, Image as ImageIcon } from 'lucide-react';

const ProfileSettingsPage = () => {
    const { member, loadMember } = useAuth();
    const [imagePreview, setImagePreview] = useState(member.profileImage?.url);
    const [profileData, setProfileData] = useState({
        firstName: member.firstName,
        lastName: member.lastName,
        phone: member.phone || '',
        profileImage: null, // To hold the new file
    });
    const [passwordData, setPasswordData] = useState({
        oldPassword: '',
        newPassword: '',
        confirmPassword: '',
    });
    const [loadingProfile, setLoadingProfile] = useState(false);
    const [loadingPassword, setLoadingPassword] = useState(false);

    const handleProfileChange = (e) => {
        setProfileData({ ...profileData, [e.target.name]: e.target.value });
    };

    const handleFileChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setProfileData({ ...profileData, profileImage: file });
            const reader = new FileReader();
            reader.onloadend = () => {
                setImagePreview(reader.result);
            };
            reader.readAsDataURL(file);
        }
    };

    const handlePasswordChange = (e) => {
        setPasswordData({ ...passwordData, [e.target.name]: e.target.value });
    };

    const handleProfileSubmit = async (e) => {
        e.preventDefault();
        setLoadingProfile(true);

        const formData = new FormData();
        formData.append('firstName', profileData.firstName);
        formData.append('lastName', profileData.lastName);
        formData.append('phone', profileData.phone);
        if (profileData.profileImage) {
            formData.append('profileImage', profileData.profileImage);
        }

        try {
            await api.put('/member/profile/update', formData, {
                headers: { 'Content-Type': 'multipart/form-data' },
            });
            await loadMember();
            toast.success('Profile updated successfully!');
        } catch (error) {
            toast.error(error.response?.data?.message || 'Failed to update profile.');
        } finally {
            setLoadingProfile(false);
        }
    };

    const handlePasswordSubmit = async (e) => {
        e.preventDefault();
        setLoadingPassword(true);
        try {
            await api.put('/member/password/update', passwordData);
            toast.success('Password updated successfully!');
            setPasswordData({ oldPassword: '', newPassword: '', confirmPassword: '' });
        } catch (error) {
            toast.error(error.response?.data?.message || 'Failed to update password.');
        } finally {
            setLoadingPassword(false);
        }
    };

    return (
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
            <div className="max-w-4xl mx-auto">
                <div className="text-center mb-12">
                    <h1 className="text-4xl font-bold tracking-tight text-text-primary">Profile Settings</h1>
                    <p className="mt-2 text-lg text-text-secondary">Manage your personal information and account security.</p>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-8 items-start">
                    {/* Update Profile Form */}
                    <div className="bg-surface border border-border rounded-xl p-8 space-y-6">
                        <h2 className="text-2xl font-semibold text-text-primary flex items-center gap-3"><User size={24}/> Update Your Details</h2>
                        <form onSubmit={handleProfileSubmit} className="space-y-4">
                            <div className="flex flex-col items-center gap-4">
                                <img src={imagePreview} alt="Profile" className="w-24 h-24 rounded-full object-cover border-4 border-primary/50"/>
                                <input type="file" name="profileImage" id="profileImage" onChange={handleFileChange} accept="image/*" className="w-full text-sm text-text-secondary file:mr-4 file:py-2 file:px-4 file:rounded-xl file:border-0 file:text-sm file:font-semibold file:bg-primary/10 file:text-primary hover:file:bg-primary/20"/>
                            </div>
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-text-secondary mb-2">First Name</label>
                                    <input type="text" name="firstName" value={profileData.firstName} onChange={handleProfileChange} className="w-full bg-background border border-border rounded-lg p-2.5" />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-text-secondary mb-2">Last Name</label>
                                    <input type="text" name="lastName" value={profileData.lastName} onChange={handleProfileChange} className="w-full bg-background border border-border rounded-lg p-2.5" />
                                </div>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-text-secondary mb-2">Contact Number</label>
                                <input type="tel" name="phone" value={profileData.phone} onChange={handleProfileChange} className="w-full bg-background border border-border rounded-lg p-2.5" />
                            </div>
                            <button type="submit" disabled={loadingProfile} className="w-full mt-4 flex justify-center items-center gap-2 bg-primary text-white font-semibold py-3 rounded-lg hover:bg-primary-hover disabled:opacity-50">
                                {loadingProfile ? <Loader2 className="animate-spin"/> : <Save size={18} />}
                                <span>Save Profile</span>
                            </button>
                        </form>
                    </div>

                    {/* Change Password Form */}
                    <div className="bg-surface border border-border rounded-xl p-8 space-y-6">
                        <h2 className="text-2xl font-semibold text-text-primary flex items-center gap-3"><Lock size={24}/> Change Password</h2>
                        <form onSubmit={handlePasswordSubmit} className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-text-secondary mb-2">Current Password</label>
                                <input type="password" name="oldPassword" value={passwordData.oldPassword} onChange={handlePasswordChange} required className="w-full bg-background border border-border rounded-lg p-2.5" />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-text-secondary mb-2">New Password</label>
                                <input type="password" name="newPassword" value={passwordData.newPassword} onChange={handlePasswordChange} required className="w-full bg-background border border-border rounded-lg p-2.5" />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-text-secondary mb-2">Confirm New Password</label>
                                <input type="password" name="confirmPassword" value={passwordData.confirmPassword} onChange={handlePasswordChange} required className="w-full bg-background border border-border rounded-lg p-2.5" />
                            </div>
                            <button type="submit" disabled={loadingPassword} className="w-full mt-4 flex justify-center items-center gap-2 bg-secondary text-white font-semibold py-3 rounded-lg hover:bg-secondary/80 disabled:opacity-50">
                                 {loadingPassword ? <Loader2 className="animate-spin"/> : <Save size={18} />}
                                <span>Update Password</span>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ProfileSettingsPage;
' ake tose in the same theme
